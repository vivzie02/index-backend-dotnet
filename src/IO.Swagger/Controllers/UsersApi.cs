/*
 * Index Card API
 *
 * This is a simple server for loading and saving index cards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using Microsoft.AspNetCore.Http;
using System.Net;
using IO.Swagger.Models.DTOs;
using IO.Swagger.Models.DAOs;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully created new user</response>
        /// <response code="409">Username already exists</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("UsersPost")]
        public virtual IActionResult UsersPost([FromBody]UserDAO body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            return StatusCode(501);
        }

        /// <summary>
        /// Delete user
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="204">successfully deleted user</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">user not found</response>
        [HttpDelete]
        [Route("/v1/users/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdDelete")]
        public virtual IActionResult UsersUserIdDelete([FromRoute][Required]Guid? userId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get information about the user
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">Sucessful pull of user info</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/v1/users/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Sucessful pull of user info")]
        public virtual IActionResult UsersUserIdGet([FromRoute][Required]Guid? userId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"experienceLevel\" : 0,\n  \"userName\" : \"Max Mustermann\",\n  \"points\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// update selected user
        /// </summary>
        /// <param name="body">New information to update user</param>
        /// <param name="userId"></param>
        /// <response code="204">sucessfully updated user</response>
        /// <response code="401">Access token missing or invalid</response>
        /// <response code="404">selected user not found</response>
        [HttpPatch]
        [Route("/v1/users/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUserIdPatch")]
        public virtual IActionResult UsersUserIdPatch([FromBody]UsersUserIdBody body, [FromRoute][Required]Guid? userId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
