/*
 * Index Card API
 *
 * This is a simple server for loading and saving index cards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IndexCardsApiController : ControllerBase
    { 
        /// <summary>
        /// delete specified card
        /// </summary>
        /// <param name="cardId"></param>
        /// <response code="204">Successfully deleted card</response>
        /// <response code="404">Card not found</response>
        [HttpDelete]
        [Route("/v1/index-cards/{cardId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsCardIdDelete")]
        public virtual IActionResult IndexCardsCardIdDelete([FromRoute][Required]Guid? cardId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a specific card from the database
        /// </summary>
        /// <param name="cardId"></param>
        /// <response code="200">Successfully pulled the requested card</response>
        /// <response code="404">Card not found</response>
        [HttpGet]
        [Route("/v1/index-cards/{cardId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsCardIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IndexCard), description: "Successfully pulled the requested card")]
        public virtual IActionResult IndexCardsCardIdGet([FromRoute][Required]Guid? cardId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IndexCard));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IndexCard>(exampleJson)
                        : default(IndexCard);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// update specified card
        /// </summary>
        /// <param name="body">New information to update card</param>
        /// <param name="cardId"></param>
        /// <response code="200">successfully updated selected card</response>
        [HttpPatch]
        [Route("/v1/index-cards/{cardId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsCardIdPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(IndexCard), description: "successfully updated selected card")]
        public virtual IActionResult IndexCardsCardIdPatch([FromBody]IndexCard body, [FromRoute][Required]Guid? cardId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IndexCard));
            string exampleJson = null;
            exampleJson = "{\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IndexCard>(exampleJson)
                        : default(IndexCard);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get all cards from the collection
        /// </summary>
        /// <param name="collectionId"></param>
        /// <response code="200">Successfully pulled all cards from collection</response>
        [HttpGet]
        [Route("/v1/index-cards/{collectionId}/index-cards")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsCollectionIdIndexCardsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IndexCard>), description: "Successfully pulled all cards from collection")]
        public virtual IActionResult IndexCardsCollectionIdIndexCardsGet([FromRoute][Required]Guid? collectionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IndexCard>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n}, {\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<IndexCard>>(exampleJson)
                        : default(List<IndexCard>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new index card for the selected collection
        /// </summary>
        /// <param name="body">content of the index card</param>
        /// <param name="collectionId"></param>
        /// <response code="200">successfully created card</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/v1/index-cards/{collectionId}/index-cards")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsCollectionIdIndexCardsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(IndexCard), description: "successfully created card")]
        public virtual IActionResult IndexCardsCollectionIdIndexCardsPost([FromBody]IndexCard body, [FromRoute][Required]Guid? collectionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IndexCard));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IndexCard>(exampleJson)
                        : default(IndexCard);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// get all cards of the logged in user
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="200">successfully pulled the users cards</response>
        [HttpGet]
        [Route("/v1/index-cards/{userId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IndexCardsUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IndexCard>), description: "successfully pulled the users cards")]
        public virtual IActionResult IndexCardsUserIdGet([FromRoute][Required]Guid? userId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IndexCard>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n}, {\n  \"backFormat\" : \"latin\",\n  \"backSide\" : \"Lisbon\",\n  \"cardId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\",\n  \"frontFormat\" : \"latin\",\n  \"frontSide\" : \"What is the capital of Portugal?\",\n  \"collectionId\" : \"9666e8bf-6f37-44d1-aab4-f2faaf6da243\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<IndexCard>>(exampleJson)
                        : default(List<IndexCard>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
