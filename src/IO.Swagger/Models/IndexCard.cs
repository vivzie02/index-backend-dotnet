/*
 * Index Card API
 *
 * This is a simple server for loading and saving index cards
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Model for the index cards
    /// </summary>
    [DataContract]
    public partial class IndexCard : IEquatable<IndexCard>
    { 
        /// <summary>
        /// Gets or Sets CardId
        /// </summary>

        [DataMember(Name="cardId")]
        public Guid? CardId { get; set; }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>

        [DataMember(Name="collectionId")]
        public Guid? CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets FrontSide
        /// </summary>

        [DataMember(Name="frontSide")]
        public string FrontSide { get; set; }

        /// <summary>
        /// Gets or Sets FrontFormat
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FrontFormatEnum
        {
            /// <summary>
            /// Enum LatinEnum for latin
            /// </summary>
            [EnumMember(Value = "latin")]
            LatinEnum = 0,
            /// <summary>
            /// Enum HiraganaEnum for hiragana
            /// </summary>
            [EnumMember(Value = "hiragana")]
            HiraganaEnum = 1,
            /// <summary>
            /// Enum KatakanaEnum for katakana
            /// </summary>
            [EnumMember(Value = "katakana")]
            KatakanaEnum = 2,
            /// <summary>
            /// Enum KanjiEnum for kanji
            /// </summary>
            [EnumMember(Value = "kanji")]
            KanjiEnum = 3        }

        /// <summary>
        /// Gets or Sets FrontFormat
        /// </summary>

        [DataMember(Name="frontFormat")]
        public FrontFormatEnum? FrontFormat { get; set; }

        /// <summary>
        /// Gets or Sets BackSide
        /// </summary>

        [DataMember(Name="backSide")]
        public string BackSide { get; set; }

        /// <summary>
        /// Gets or Sets BackFormat
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BackFormatEnum
        {
            /// <summary>
            /// Enum LatinEnum for latin
            /// </summary>
            [EnumMember(Value = "latin")]
            LatinEnum = 0,
            /// <summary>
            /// Enum HiraganaEnum for hiragana
            /// </summary>
            [EnumMember(Value = "hiragana")]
            HiraganaEnum = 1,
            /// <summary>
            /// Enum KatakanaEnum for katakana
            /// </summary>
            [EnumMember(Value = "katakana")]
            KatakanaEnum = 2,
            /// <summary>
            /// Enum KanjiEnum for kanji
            /// </summary>
            [EnumMember(Value = "kanji")]
            KanjiEnum = 3        }

        /// <summary>
        /// Gets or Sets BackFormat
        /// </summary>

        [DataMember(Name="backFormat")]
        public BackFormatEnum? BackFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IndexCard {\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  CollectionId: ").Append(CollectionId).Append("\n");
            sb.Append("  FrontSide: ").Append(FrontSide).Append("\n");
            sb.Append("  FrontFormat: ").Append(FrontFormat).Append("\n");
            sb.Append("  BackSide: ").Append(BackSide).Append("\n");
            sb.Append("  BackFormat: ").Append(BackFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IndexCard)obj);
        }

        /// <summary>
        /// Returns true if IndexCard instances are equal
        /// </summary>
        /// <param name="other">Instance of IndexCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IndexCard other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CardId == other.CardId ||
                    CardId != null &&
                    CardId.Equals(other.CardId)
                ) && 
                (
                    CollectionId == other.CollectionId ||
                    CollectionId != null &&
                    CollectionId.Equals(other.CollectionId)
                ) && 
                (
                    FrontSide == other.FrontSide ||
                    FrontSide != null &&
                    FrontSide.Equals(other.FrontSide)
                ) && 
                (
                    FrontFormat == other.FrontFormat ||
                    FrontFormat != null &&
                    FrontFormat.Equals(other.FrontFormat)
                ) && 
                (
                    BackSide == other.BackSide ||
                    BackSide != null &&
                    BackSide.Equals(other.BackSide)
                ) && 
                (
                    BackFormat == other.BackFormat ||
                    BackFormat != null &&
                    BackFormat.Equals(other.BackFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CardId != null)
                    hashCode = hashCode * 59 + CardId.GetHashCode();
                    if (CollectionId != null)
                    hashCode = hashCode * 59 + CollectionId.GetHashCode();
                    if (FrontSide != null)
                    hashCode = hashCode * 59 + FrontSide.GetHashCode();
                    if (FrontFormat != null)
                    hashCode = hashCode * 59 + FrontFormat.GetHashCode();
                    if (BackSide != null)
                    hashCode = hashCode * 59 + BackSide.GetHashCode();
                    if (BackFormat != null)
                    hashCode = hashCode * 59 + BackFormat.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IndexCard left, IndexCard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IndexCard left, IndexCard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
